#!/usr/bin/python3 -u
# -*- coding: utf-8 -*-

import getopt
import os
import os.path
import re
import sys
import tempfile
import shutil
import stat
import difflib
import shlex
import subprocess

simulate = False

_USAGE = '''#BEGIN_DO_NOT_MODIFY:make update-doc
RBT(1)                                                                                                     User commands                                                                                                    RBT(1)

NAME
       rbt - Replace the text between begin and end tags

SYNOPSIS
       rbt [OPTION] [FILE]

DESCRIPTION
       rbt is a small utility to replace the text between begin and end tags

       With no FILE, or when FILE is -, read standard input.

OPTIONS
       -b string, --begin-tag string
           The begin tag to search.

       -e string, --end-tag string
           The end tag to search.

       -r string, --replace string
           The string used to replace.

       -R FILE, --replace-file FILE
           The file used to replace.

       -s, --simulate
           Force output to STDOUT.

       -d, --delete
           Delete begin/end tags after replacing.

       -h
           Display help.

       -v
           Display version.

EXAMPLES
       Replace between tags using stdout (-s option)

           $ cat /tmp/lorem_ipsum
           Lorem ipsum dolor sit amet, consectetur adipiscing elit. *BEGIN*Pellentesque maximus faucibus lectus, in ultricies lorem volutpat in.
           Sed rutrum risus et vehicula rhoncus. Nunc sed est et eros mollis vehicula. Pellentesque semper dignissim maximus.
           Praesent in justo et ante faucibus eleifend in ac est. Donec orci magna, pellentesque id libero nec, faucibus porta purus.
           Pellentesque luctus sollicitudin tortor sit amet accumsan. Nullam mauris felis, egestas in faucibus in, feugiat vel arcu.
           *END*Cras rhoncus aliquam tristique.
           $ rbt -s -b '*BEGIN*' -e '*END*' -r 'new text here' /tmp/lorem_ipsum
           Lorem ipsum dolor sit amet, consectetur adipiscing elit. *BEGIN*new text here
           *END*Cras rhoncus aliquam tristique.

       Replace infile between tags and delete begin/end tags (-d option)

           $ cat /tmp/lorem_ipsum
           Lorem ipsum dolor sit amet, consectetur adipiscing elit. *BEGIN*Pellentesque maximus faucibus lectus, in ultricies lorem volutpat in.
           Sed rutrum risus et vehicula rhoncus. Nunc sed est et eros mollis vehicula. Pellentesque semper dignissim maximus.
           Praesent in justo et ante faucibus eleifend in ac est. Donec orci magna, pellentesque id libero nec, faucibus porta purus.
           Pellentesque luctus sollicitudin tortor sit amet accumsan. Nullam mauris felis, egestas in faucibus in, feugiat vel arcu.
           *END*Cras rhoncus aliquam tristique.
           $ rbt -d -b '*BEGIN*' -e '*END*' -r 'new text here' -d /tmp/lorem_ipsum
           Processed: /tmp/lorem_ipsum
           $ cat /tmp/lorem_ipsum
           Lorem ipsum dolor sit amet, consectetur adipiscing elit. new text here
           Cras rhoncus aliquam tristique.

       Replace in file using the content of a file

           $ cat x
           Lorem ipsum dolor sit amet, consectetur adipiscing elit. *BEGIN*Pellentesque maximus faucibus lectus, in ultricies lorem volutpat in.
           Sed rutrum risus et vehicula rhoncus. Nunc sed est et eros mollis vehicula. Pellentesque semper dignissim maximus.
           Praesent in justo et ante faucibus eleifend in ac est. Donec orci magna, pellentesque id libero nec, faucibus porta purus.
           Pellentesque luctus sollicitudin tortor sit amet accumsan. Nullam mauris felis, egestas in faucibus in, feugiat vel arcu.
           *END*Cras rhoncus aliquam tristique.
           $ cat y
           mon texte
           $ rbt -b '*BEGIN*' -e '*END*' -R y x
           Processed: x
           $ cat x
           Lorem ipsum dolor sit amet, consectetur adipiscing elit. *BEGIN*mon texte
           *END*Cras rhoncus aliquam tristique.

AUTHOR
       Written by Jean-François Giraud.

COPYRIGHT
       Copyright  ©  2023  Jean-François  Giraud.  License  GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the
       extent permitted by law.

replace-between-tags 0.0.13                                                                                 2023-10-23                                                                                                      RBT(1)
#END_DO_NOT_MODIFY:make update-doc
'''

def usage():
    lines = _USAGE.split('\n')
    display = False
    for i, line in enumerate(lines):
        if line.startswith("NAME"):
            display = True
        if line.startswith("AUTHOR"):
            display = False
        if display:
            print(line)
    sys.exit(0)

def version():
    lines = _USAGE.split('\n')
    for i, line in enumerate(lines):
        if line.startswith("#END_DO_NOT_MODIFY:make update-doc"):
            previous_line = lines[i-1]
            print(previous_line.split()[1])
            break
    sys.exit(0)

def error(message):
    print(message, file=sys.stderr)
    sys.exit(1)


def chomp(x):
    if x.endswith("\r\n"): return x[:-2]
    if x.endswith("\n") or x.endswith("\r"): return x[:-1]
    return x


def eol(x):
    if x.endswith("\r\n"): return (x[:-2], x[-2:])
    if x.endswith("\n") or x.endswith("\r"): return (x[:-1], x[-1:])
    return (x, None)


def readfile(filename, fdw):
    with open(filename, 'rt') as fd_in:
        for line in fd_in:
            fdw(line)

def find_next(line, tags):
    index_min = len(line)
    found = None
    for tag in tags:
        index = line.find(tag)
        if index != -1 and index < index_min:
            index_min = index
            found = tag
    return (found, index_min) if found else (None, -1)

def apply_on_file(config, fileinfo):
    (use_stdout_ori, filename) = fileinfo
    use_stdout = use_stdout_ori
    move = False
    with open(filename, 'rt') as fd_in:
        depth = 0
        if use_stdout or simulate:
            fd_out = open(sys.stdout.fileno(), 'w', closefd=False)
        else:
            (fno, temporary_file) = tempfile.mkstemp()
            fd_out = open(fno, 'wt')
            move = True
        tags = { config.begin_tag, config.end_tag }
        debug = False
        with fd_out:
            for line in fd_in:
                rest = line
                if debug:
                    print("rest=", rest, file=sys.stderr)
                while rest:
                    (next_tag, next_index) = find_next(rest, tags)
                    if debug:
                        print("rest=", rest, file=sys.stderr)
                        print("depth=", depth, file=sys.stderr)
                        print("nt=", next_tag, "i=", next_index, file=sys.stderr)
                        print("----", file=sys.stderr)
                    if depth == 0:
                        if not next_tag:
                            fd_out.write(rest)
                            break
                        if next_tag == config.end_tag:
                            error("reach end tag before start tag")
                        if next_tag == config.begin_tag:
                            fd_out.write(rest[:next_index])
                            if not config.delete_tags:
                                fd_out.write(next_tag)
                            rest = rest[next_index+len(next_tag):]
                            depth = depth + 1
                            written = False
                            (c, e) = eol(rest)
                            if not e:
                                config.replace(fd_out.write)
                                written = True
                    else:
                        if not next_tag:
                            (c, e) = eol(rest)
                            if not written:
                                config.replace(fd_out.write)
                                fd_out.write(e)
                                written = True
                            break
                        if next_tag == config.begin_tag:
                            error("reach begin tag before end tag")
                        if next_tag == config.end_tag:
                            if not written:
                                config.replace(fd_out.write)
                                written = True
                            if not config.delete_tags:
                                fd_out.write(next_tag)
                            rest = rest[next_index+len(next_tag):]
                            depth = depth - 1

#printf 'hello\ntiti*BEGIN*tutu*END*toto*BEGIN*entre\net puis la*END*fin' | ./bin/rbt -b '*BEGIN*' -e '*END*' --replace ppp

    if not simulate and move:
        shutil.move(temporary_file, filename)
        print('Processed: %s' % (filename,), file=sys.stderr)




def apply_replacements(config, files):
    for afile in files:
        apply_on_file(config, afile)


class Config:

    def __init__(self):
        self.begin_tag = None
        self.end_tag = None
        self.replace = None
        self.simulate = False
        self.comment = False
        self.uncomment = False
        self.delete_tags = False
        self.files = []

    def parse(self, arguments):
        opts, args = [], []
        try:
            opts, args = getopt.getopt(arguments, "hvsdb:e:r:R:cu",
                                       ["help", "version", "simulate", "delete-tags", "begin-tag=", "end-tag=", "replace=",
                                       "replace-file=", "comment", "uncomment"])
        except getopt.GetoptError as e:
            error(e)

        if len(opts) == 0:
            usage()

        for o, a in opts:
            if o in ("-h", "--help"):
                usage()
            if o in ("-v", "--version"):
                version()
            if o in ("-c", "--comment"):
                self.comment = True
            if o in ("-u", "--uncomment"):
                self.uncomment = True
            if o in ("-b", "--begin-tag"):
                self.begin_tag = a
            if o in ("-e", "--end-tag"):
                self.end_tag = a
            if o in ("-s", "--simulate"):
                self.simulate = True
            if o in ("-d", "--delete-tags"):
                self.delete_tags = True
            if o in ("-r", "--replace"):
                # if -s in last position in the command line, a=''
                # https://stackoverflow.com/questions/21053988/lambda-function-accessing-outside-variable
                self.replace = lambda fdw, a=a: fdw(a)
            if o in ("-R", "--replace-file"):
                self.replace = lambda fdw, a=a: readfile(a, fdw)
            if len(args) == 0:
                args = ["-"]
        self.files = args

    def get_files(self):
        return self.files

    def validate(self):
        if not self.begin_tag:
            error("option --begin-tag is required")
        if not self.end_tag:
            error("option --end-tag is required")
        if self.comment and self.uncomment:
            error("options --comment and --uncomment are exclusives")
        if (self.comment or self.uncomment) and self.replace:
            error("options (--comment or --uncomment) and (--replace or --replace-file) are exclusives")
        if not self.replace and (not self.comment and not self.uncomment):
            error("option --replace or --replace-file is required")


def create_tmp_and_init(fd_in):
    (fno, absolute_path) = tempfile.mkstemp()
    with open(fno, 'wt') as fd_out:
        for line in fd_in:
            fd_out.write(line)
    return absolute_path


def op(filename):
    if filename == '-':
        return True, create_tmp_and_init(sys.stdin)
    else:
        with open(filename, 'rt') as fd_in:
            if stat.S_ISFIFO(os.fstat(fd_in.fileno()).st_mode):
                return True, create_tmp_and_init(fd_in)
            else:
                return False, filename


def as_real_files(files):
    return [op(x) for x in files]


def close_files(files):
    for is_tmp, filepath in files:
        if is_tmp:
            os.remove(filepath)


if __name__ == '__main__':

    config = Config()
    config.parse(sys.argv[1:])
    config.validate()

    paths = as_real_files(config.get_files())
    apply_replacements(config, paths)

    close_files(paths)
